name: Package Release

env:
  COSIGN_EXPERIMENTAL: 1

on:
  workflow_call:
    secrets:
      pull-request-token:
        description: "Token to open a pull request to the package repository."
        required: true
    inputs:
      package-name-slug:
        description: "The Carvel package name slug (e.g. knative-serving)."
        required: true
        type: string
      package-name-display:
        description: "The Carvel package name display (e.g. Knative Serving)."
        required: true
        type: string
      registry-server:
        description: "URL of the container registry."
        required: true
        type: string
        default: ghcr.io
      registry-username:
        description: "Username to log into the container registry."
        required: true
        type: string
        default: ${{ github.actor }}
      image:
        description: "The OCI image name. This must not include a tag or digest."
        required: true
        type: string
        default: ${{ github.repository }}
      version:
        description: "The OCI image version following semantic versioning."
        required: true
        type: string
      
jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write
    outputs:
      image-name: ${{ steps.image-info.outputs.image_name }}
      image-digest: ${{ steps.image-info.outputs.image_digest }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3.3.0

      - name: Set up Carvel
        uses: carvel-dev/carvel-setup-action@v1.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into container registry
        uses: redhat-actions/podman-login@v1.5
        with:
          username: ${{ inputs.registry-username }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ inputs.registry-server }}
      
      - name: Create k3d cluster
        run: |
          # Install k3d
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          
          # Create a Kubernetes cluster
          k3d cluster create test-cluster

          # Wait for the generation of a token for the Service Account.
          # It can be removed once support for Kubernetes 1.24 is dropped.
          while [ $(kubectl get configmap kube-root-ca.crt --no-headers | wc -l) -eq 0 ] ; do
            sleep 3
          done

      - name: Package and publish OCI bundle
        run: |
          image_tag=$(echo ${{ inputs.version }} | tr + -)
          kctrl package release -y --version ${{ inputs.version }} \
            --chdir package \
            --copy-to ../carvel-artifacts \
            --repo-output ../repo \
            --tag ${image_tag}
      
      - name: Get released OCI image name with digest
        id: image-info
        run: |
          package_file=$(find carvel-artifacts/packages -name 'package.yml')
          image_release=$(yq '.spec.template.spec.fetch[0].imgpkgBundle.image' ${package_file})
          echo "IMAGE_RELEASE=${image_release}" >> $GITHUB_ENV

          echo "image_name=$(echo ${image_release} | cut -d'@' -f1)" >> $GITHUB_OUTPUT
          echo "image_digest=$(echo ${image_release} | cut -d'@' -f2)" >> $GITHUB_OUTPUT
      
      - name: Add additional tags to OCI image
        run: |
          podman pull ${IMAGE_RELEASE}
          podman tag ${IMAGE_RELEASE} ${{ inputs.registry-server }}/${{ inputs.image }}:latest
          podman push ${{ inputs.registry-server }}/${{ inputs.image }}:latest
      
      - name: Create a release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ inputs.version }} \
                --generate-notes \
                ./carvel-artifacts/packages/${{ inputs.package-name-slug }}.packages.kadras.io/package.yml \
                ./carvel-artifacts/packages/${{ inputs.package-name-slug }}.packages.kadras.io/metadata.yml \
                ./README.md
      
      - name: Upload package.yml artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ inputs.version }}.yml
          path: ./repo/packages/${{ inputs.package-name-slug }}.packages.kadras.io/${{ inputs.version }}.yml
          retention-days: 1
      
      - name: Upload metadata.yml artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: metadata.yml
          path: ./repo/packages/${{ inputs.package-name-slug }}.packages.kadras.io/metadata.yml
          retention-days: 1

  sign:
    name: Sign
    runs-on: ubuntu-22.04
    needs: [build]
    permissions:
      packages: write
      id-token: write
    env:
      IMAGE_NAME: ${{ needs.build.outputs.image-name }}
      IMAGE_DIGEST: ${{ needs.build.outputs.image-digest }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.8.1

      - name: Log into container registry
        uses: redhat-actions/podman-login@v1.5
        with:
          username: ${{ inputs.registry-username }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ inputs.registry-server }}

      - name: Sign image
        run: |
          cosign sign "${IMAGE_NAME}@${IMAGE_DIGEST}"
  
  provenance:
    needs: [build,sign]
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.4.0
    with:
      image: ${{ needs.build.outputs.image-name }}
      digest: ${{ needs.build.outputs.image-digest }}
      registry-username: ${{ inputs.registry-username }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  repo:
    name: Package Repository
    runs-on: ubuntu-22.04
    needs: [provenance]
    permissions:
      contents: read
    env:
      PACKAGE_REPO: kadras-packages
    steps:
      - name: Download package.yml artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ inputs.version }}.yml
          path: ./artifacts
      
      - name: Download metadata.yml artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: metadata.yml
          path: ./artifacts

      - name: Checkout package repository source code
        uses: actions/checkout@v3.3.0
        with:
          path: kadras-packages
          repository: ${{ github.repository_owner }}/${{ env.PACKAGE_REPO }}
          ref: main
          token: ${{ secrets.pull-request-token }}

      - name: Push release artifacts to package repository
        env:
          GH_TOKEN: ${{ secrets.pull-request-token }}
        run: |
          package_path=kadras-packages/repo/packages/${{ inputs.package-name-slug }}.packages.kadras.io
          if [ ! -f ${package_path} ]; then
            mkdir -p ${package_path}
          fi

          mv -f artifacts/${{ inputs.version }}.yml ${package_path}/${{ inputs.version }}.yml
          mv -f artifacts/metadata.yml ${package_path}/metadata.yml

          cd kadras-packages

          git config user.name github-actions
          git config user.email github-actions@github.com

          branch_name=$(date +%s | base64)
          git checkout -b ${branch_name}

          git add repo/packages/${{ inputs.package-name-slug }}.packages.kadras.io/${{ inputs.version }}.yml
          git add repo/packages/${{ inputs.package-name-slug }}.packages.kadras.io/metadata.yml

          git commit -m "Update ${{ inputs.package-name-display }} metadata and add version ${{ inputs.version }}"
          git push origin ${branch_name}

          gh pr create -f --base main --title "Add ${{ inputs.package-name-display }} ${{ inputs.version }}" --body "Update ${{ inputs.package-name-display }} metadata and add version ${{ inputs.version }}"
